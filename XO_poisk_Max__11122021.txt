board=[
    # ["0", "0", "X"],
    # ["0", "-", "-"],
    # ["-", "-", "0"],
    ["0", "-", "-", "-", "0"],
    ["-", "X", "X", "-", "-"],
    ["-", "-", "-", "-", "-"],
    ["-", "X", "X", "-", "X"],
    ["0", "0", "X", "-", "0"],

    ]

Ar0=[
    ["-", "0", "0"],
    ["0", "-", "0"],
    ["0", "0", "-"],
    ["-", "-", "0"],
    ["0", "-", "-"],
    ["-", "0", "-"],
    ["-", "-", "-"],
    ]

ArX=[
    ["-", "X", "X"],
    ["X", "-", "X"],
    ["X", "X", "-"],
    ["-", "-", "X"],
    ["X", "-", "-"],
    ["-", "X", "-"],
    ["-", "-", "-"],
    ]

RatingTblSelf=[
    [1, 2, 3],
    [10.0, 1.0, 0.3]
    ]

RatingTblOpponent=[
    [1, 2, 3],
    [0.8, 0.4, 0.2]
    ]

Ar2temp=[]

n=len(board)
n2 = len(Ar0[0])

# Checking row -
for i in range(n):
    checking_field = "".join(board[i][j] for j in range(n))
    for i2 in range(len(Ar0)):
        checking_Ar0 = "".join(Ar0[i2][j2] for j2 in range(n2))
        if checking_field.find(checking_Ar0) >= 0 :
            countspace=checking_Ar0.count("-")
            start =0
            for z in range(countspace):
                index_space=checking_Ar0.find("-", start)
                Ar2temp.append([i, checking_field.find(checking_Ar0)+index_space, countspace, "-"])
                start = index_space+1
# print(Ar2temp)

# Checking column |
for i in range(n):
    checking_field = "".join(board[j][i] for j in range(n))
    for i2 in range(len(Ar0)):
        checking_Ar0 = "".join(Ar0[i2][j] for j in range(n2))
        if checking_field.find(checking_Ar0) >= 0 :
            countspace=checking_Ar0.count("-")
            start =0
            for z in range(countspace):
                delta_space=checking_Ar0.find("-", start)
                Ar2temp.append([checking_field.find(checking_Ar0)+delta_space,i, countspace, "|"])
                start = delta_space+1
# print(Ar2temp)
# print("-"*20)

# Cheking diagonal right to left /
for diog in range(2,(n - 1) * 2-1):
    index_i= max (0, diog-n+1)
    index_j= min (diog, n-1)
    checking_field = str(index_i)+str(index_j)+":"


    for i in range(n):
        j= diog-i
        if j >=0 and j<=n-1:
            checking_field = checking_field + board[i][j]
    # print(f"checking_field= {checking_field}")


    for i2 in range(len(Ar0)):
        checking_Ar0 = "".join(Ar0[i2][j] for j in range(n2))


        if checking_field.find(checking_Ar0) >= 0:
            delta_field=checking_field.find(checking_Ar0)-3
            countspace = checking_Ar0.count("-")
            # print("+"*5)
            # print(f"checking_Ar0 {checking_Ar0}")
            # print(f"checking_field {checking_field}")
            # print(f'countspace {countspace}')
            # print("+" * 5)
            start = 0
            for z in range(countspace):
                delta_space = checking_Ar0.find("-", start)
                # print(f'countspace= {z}')
                # print(f"checking_Ar0 {checking_Ar0}")
                # print(f'checking_field= {checking_field}')
                # print(f"delta_field= {delta_field}")
                # print(f'delta_space= {delta_space}')
                # print(f'checking_field[i]={checking_field[0]}')
                # print(f'checking_field[j]={checking_field[1]}')
                # print("****"*20)
                Ar2temp.append([int(checking_field[0])+delta_field+delta_space, int(checking_field[1])-delta_field-delta_space , countspace,"/"])
                start = delta_space + 1
# print(Ar2temp)

# Cheking diagonal  left to right \
for diog in range(-n+3, n-2):
    index_i = max(0, diog)
    index_j = index_i-diog
    checking_field = str(index_i)+str(index_j)+":"
    for i in range(n):
        j=i-diog
        if j >=0 and j<=n-1:
            checking_field = checking_field + board[i][j]
    # print(f"checking_field\= {checking_field}")


    for i2 in range(len(Ar0)):
        checking_Ar0 = "".join(Ar0[i2][j] for j in range(n2))


        if checking_field.find(checking_Ar0) >= 0:
            delta_field=checking_field.find(checking_Ar0)-3
            countspace = checking_Ar0.count("-")
            # print("+"*5)
            # print(f"checking_Ar0 {checking_Ar0}")
            # print(f"checking_field {checking_field}")
            # print(f'countspace {countspace}')
            # print("+" * 5)
            start = 0
            for z in range(countspace):
                delta_space = checking_Ar0.find("-", start)
                # print(f'countspace= {z}')
                # print(f"checking_Ar0 {checking_Ar0}")
                # print(f'checking_field= {checking_field}')
                # print(f"delta_field= {delta_field}")
                # print(f'delta_space= {delta_space}')
                # print(f'checking_field[i]={checking_field[0]}')
                # print(f'checking_field[j]={checking_field[1]}')
                # print("****"*20)
                Ar2temp.append([int(checking_field[0])+delta_field+delta_space, int(checking_field[1])+delta_field+delta_space , countspace,'\\'])
                start = delta_space + 1
print(Ar2temp)

# Put a rating depending on the number of moves to win
Ar2 =[]
Ar2 = [[0] * 3 for i in range(len(Ar2temp))]

for i in range(len(Ar2temp)) :
    Ar2[i][0] = Ar2temp[i][0]
    Ar2[i][1] = Ar2temp[i][1]
    for j2 in range(len(RatingTblSelf)+1):
         if Ar2temp[i][2]== RatingTblSelf[0][j2]:
            Ar2[i][2] = RatingTblSelf[1][j2]
print(Ar2)





#
#     # print(checking_field)
#


print("-"*20)
#-------------------------------------
# Ar2=[
#     [0, 1, 0.5],
#     [0, 2, 0.5],
#     [1, 0, 0.3],
#     [1, 1, 0.3],
#     [1, 1, 0.5],
#     [1, 2, 0.3],
#     [2, 0, 0.3],
#     [2, 1, 0.3],
#     [2, 2, 0.3],
#     [2, 2, 0.5],
#      ]

Ar2new = []

# check if in Ar2new is [i=0][i=1] if not -  create
for i in range(len(Ar2)):
    check=False
    for i2 in range(len(Ar2new)):
        if Ar2[i][0] == Ar2new[i2][0] and Ar2[i][1] == Ar2new[i2][1] :
            check=True
    if check==False:
            Ar2new.append([Ar2[i][0],Ar2[i][1],0])

# summarize all rating
for i in range(len(Ar2)):
    for i2 in range(len(Ar2new)):
        if Ar2[i][0] == Ar2new[i2][0] and Ar2[i][1] == Ar2new[i2][1] :
            Ar2new[i2][2]+=Ar2[i][2]
print(Ar2new)

# search for index with the highest rating
rating_max=0
index_i=0
index_j=0

for i2 in range(len(Ar2new)):
    if Ar2new[i2][2]>=rating_max:
        rating_max=Ar2new[i2][2]
        index_i = Ar2new[i2][0]
        index_j = Ar2new[i2][1]
print(f" next move to cell: {index_i},{index_j}, rating_max = {rating_max}")
